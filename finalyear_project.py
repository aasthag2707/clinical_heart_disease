# -*- coding: utf-8 -*-
"""finalyear_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AZ9ctGo0NQbCUlAOQWSAJL_v07lDebR_

#Importing the necessary libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
from sklearn.metrics import accuracy_score

"""# Loading the dataset"""

data = pd.read_csv("/content/heart_failure_clinical_records_dataset.csv")
data.head()

data.shape  #size of the dataset

data.columns  #columns of the dataset

"""# Checking whether the dataset is balanced or not """

data.high_blood_pressure.value_counts()

# displaying null values and unique values in the dataset
temp=pd.DataFrame({'null_values': data.isnull().sum(),'number_of_unique values' : data.nunique()})

temp

data.dtypes   #datatype of columns

"""#####**Describe Function is useful to get information about the categorical as well as the continous variable mainly about the continous variables.**"""

data.describe()

data.info()

"""# Data Visualization"""

sns.countplot(data['high_blood_pressure'])
plt.show()

"""Observation:- visualizing our target variable to get the info regarding the no of observation which have blood pressure as 1 and 0."""

sns.pairplot(data)

num_cols = ['serum_sodium','ejection_fraction']
plt.figure(figsize=(18,9))
data[num_cols].boxplot()
plt.title("Handling outlier in serum_sodium and ejection_fraction features", fontsize=18)
plt.show()

#Handling Outlier for Price
q1= 30
q3= 45
IQR = q3 - q1
lower_limit = q1 - 1.5 * IQR
upper_limit = q3 + 1.5 * IQR

data=data[(data['ejection_fraction'] > lower_limit) & (data['ejection_fraction'] < upper_limit)]

#Outlier detection using boxplot in Recency and Price
fig = plt.figure(figsize=(12,5))
ax1=fig.add_subplot(121)
ax2=fig.add_subplot(122)

data.boxplot(column=['age'],ax=ax1)
plt.title("Boxplot for age")

data.boxplot(column=['time'],ax=ax2)
plt.title("Boxplot for time")

fig = plt.figure(figsize=(26,7))
ax1=fig.add_subplot(131)
plt.xlabel('creatinine_phosphokinase',fontsize=12)
plt.ylabel('Frequency',fontsize=12)
ax2=fig.add_subplot(132)
plt.xlabel('platelets',fontsize=12)
plt.ylabel('Frequency',fontsize=12)
ax3=fig.add_subplot(133)
plt.xlabel('serum_creatinine',fontsize=12)
plt.ylabel('Frequency',fontsize=12)


sns.histplot(data=data, x='creatinine_phosphokinase',color='red',ax=ax1,bins=100).set(title="Histogram for creatinine_phosphokinase ")
sns.histplot(data=data, x='platelets',color='red',ax=ax2,bins=100).set(title="Histogram for platelets")
sns.histplot(data=data, x='serum_creatinine',color='red',ax=ax3,bins=100).set(title="serum_creatinine")

#Heatmap to check the correlation between the features
plt.figure(figsize = (12, 8))
corr = data.corr()
sns.heatmap(corr, linecolor = 'white', linewidths = 1, cmap = 'coolwarm')
plt.show()

"""#Normalization"""

df = data.copy()
  
# apply normalization techniques
for column in df.columns:
    df[column] = df[column]  / df[column].abs().max()
      
# view normalized data
display(df)

df.head(5)

"""#Splitting the dataset into the Training features and Target variable"""

x= df.drop('high_blood_pressure', axis=1)
y= df['high_blood_pressure']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y,
                                                    stratify=y, 
                                                    test_size=0.25)

import sklearn
from xgboost import XGBClassifier

classifier = XGBClassifier()
classifier.fit(x_train, y_train)

classifier.score(x_train, y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

sns.distplot(y_test-y_pred)

